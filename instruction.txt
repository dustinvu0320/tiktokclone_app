- Initialize nextjs app
npx create-next-app@latest ./ --ts
npm install -g @sanity/cli
sanity init --coupon javascriptmastery2022

1/ Work data schemas
- create user / comment / postedBy / post
meaning user can post multiple comments and keep track which comment has user posted
- import all schemas to schema.js
- Sanity will read schemas and populate them into Sanity Studio

2/ cd sanity-backend and run sanity start
- create dummy data on sanity studio

3/ add dependencies for package.json
- run npm install --legacy-peer-deps to make sure install the same versions of dependencies

4/ Work on pages frontend√ü
- run npm run dev to compile the app

5/ Install tailwind css
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
- fix tailwind.config.js file to import tailwind

6/ _app.tsx
- Where we create structure for nextjs (Main page)

7/ Start on Components
- Make sure to import components to _app.tsx

8/ Navbar component
- import neccessary dependencies
- add utils folders contain files

9/ Sidebar component
- Create menu sidebar
- Add Google Login React for user: use render and button to create login
https://www.npmjs.com/package/react-google-login
- Add 3 commponents inside menu sidebar <Discover/> <SuggestedAccounts/> <Footer/>

10/ Discover component
- Import and Handle arrays of topics and their icons
- Learn about useRouter https://nextjs.org/docs/api-reference/next/router

11/ Footer component
- Import and Handle arrays of footerLists

** 12/ Main Job (Video View) - render and fetch different videos
- index.tsx:
 + import axos: make real api call
 + fetch data using getServerSideProps
 https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props
 + create index.ts server in api folder
  @ Fetch data from Sanity client on Sanity url under Account to get all info into client.ts
  @ On Sanity server:
    # Generate API tokens to read and write data into api database
    # Create env to store securely token in code files
    # Add CORS origin http://localhost:3000/ to connect url to api server
 + Create types.d.ts
  @ Render to get data properties from Frist Video stored in Sanity Server
  @ Add those properties to interface Video and User
 + Render video and display UI
 + Install Path Intellisense
 + Create VideoCard and NoResults components

13/ Implement VideoCard component
- Get user data and display
- Work on user info (logo, name)
- Show video of user
 + Check if mouse is on video then display video buttons
- Apply useRef to make video play

14/ Implement Navbar component (New version of Google Identity Services)
- Work on Google Login button and functio nality
- Install react-ouath.google for login and jwt-decode to get fully access for Google user
 npm install @react-ouath/google jwt-decode
- import GoogleOAuthProvider and wrap whole app with it at _app.tsx
- Go to https://console.cloud.google.com/ and create new project
 + Configure OAuth consent screen at APIs & Services and make external to make it available publicly
 + Create OAuth client ID credentials for web app
 + Add http://localhost & http://localhost:3000 for authorized origins and URIs
 + Get clientID, store to env, and redirect to clientId for GoogleOAuthProvider
 + Add GoogleLogin in Navbar

15/ index.ts
- Fetch data from GoogleLogin and use jwt-decode to access fully information of user
- Create user object contains user information we get from decoded

16/ Create auth.ts in pages/api
- Handle POST method with data sending from index.ts

17/ Create authStore.ts in store folder since there is only single source of state
- Use Zustand to handle state management for user (instead of useContext or Redux)
- Implement Zustand and persist to save state when refresh

18/Handle user state
- in Navbar.tsx: 
 + import useAuthStore
 + pass function addUser to createOrGetUser function from GoogleLogin
 // index.ts: we're able to set userProfile to be the current user
 + userProfile being assigned to current user at index.ts, so Navbar can have user

 19/ Back to Navbar
 - If user already Login
  + Add upload button
  + Add image of user
  + Add Logout button
   * Call out googleLogout
   * in authStore.ts: add function removeUser to delete current user state
   * Call out function removeUser

20/ Upload page
- Create upload.tsx in pages folder
- Create page title
- Create an upload container
 + Check if it's not loading and haven't had videoAsset
  * Show label to select file and create function uploadFile for handle input
 + If we selected file, so we have videoAsset
  * setVideoAsset = selectedFile then show the video file
- Create a Form for caption & category & buttons (next to upload container)
- Build state for each thing in video
- Then useState to set the state by onChange 
- Create function to handlePost the video with all needed information
 + Create a document object of video

 21/ Remove Login function in Sidebar component

 22/ Create detail folder and then [id].tsx page inside
 - Create function getServerSideProps to axios.get id of video from api
 - Create [id].ts inside api/post to render api
  + Here we query the post id and search for it in api database then fetch it back
 - Get video data from function getServerSideProps and pass to the page
- Left Page:
 + Cancel Button: implement useRouter to route back to home page
 + Video Container: Show video using video play function
 + Mute Button: work on mute function using useEffect
- Right Page:
 + User Info (copy from VideoCard)
 + Caption
 + Like Button component
 + Comments Section component

 23/ LikeButton.tsx
- Check if user already like it or not then handle function
- Create function handleLike in Detail page to axios.put like to api
- Pass this function to LikeButton component to get like boolean
- Create api like.ts to handle next js backend route for like and unlike
- Create useEffect to handle userAlreadyLiked or not

24/ Comments.tsx
- Work on NoResults.tsx
 + Show icon and text for no comments